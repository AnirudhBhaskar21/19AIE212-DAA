import java.io._
import util.Random

object ShellSort {
	
	
def ShellSort(a:Array[Int]){
		val n = a.length;
		var gap:Int = n/2
		
	while(gap>0){
		for(i<-gap until n){
			var temp = a(i)
			var j = i
			
			while(j>=gap && a(j-gap)>temp){
				a(j) = a(j-gap)
				j-=1
			}
			a(j) = temp
		}
		gap/=2
		}
}                                                 //> ShellSort: (a: Array[Int])Unit

val end = 100                                     //> end  : Int = 100
val begn = 2                                      //> begn  : Int = 2
var fibTime:Array[Long] = Array()                 //> fibTime  : Array[Long] = Array()
val nVal = (begn to end).toArray                  //> nVal  : Array[Int] = Array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1
                                                  //| 6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 3
                                                  //| 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 5
                                                  //| 4, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 7
                                                  //| 3, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 9
                                                  //| 2, 93, 94, 95, 96, 97, 98, 99, 100)

 for(i <- begn to end) {
   var avgTime:Array[Long] = Array()
  	for (_ <-0 to 5) {
	    var x = Array.fill(i)(1000).map(Random.nextInt)
	  	val t0 = System.nanoTime()
	  	ShellSort(x)
	  	val t1 = System.nanoTime() - t0
	  	avgTime = avgTime :+ t1
  	}
  	fibTime = fibTime :+ (avgTime.reduce(_+_)/avgTime.length)
  }
  val time = fibTime                              //> time  : Array[Long] = Array(70882, 10783, 7024, 10163, 19521, 11923, 16284, 
                                                  //| 13851, 15851, 12230, 10050, 11372, 9801, 10069, 15786, 18223, 10909, 11487, 
                                                  //| 10836, 13044, 9801, 10802, 9941, 8498, 30111, 11900, 7603, 7620, 9018, 24377
                                                  //| , 10824, 5103, 3852, 3590, 3758, 3736, 4030, 3944, 4647, 4567, 4388, 6720, 4
                                                  //| 639, 4541, 5031, 7900, 8442, 8227, 8702, 7657, 5356, 6381, 5590, 5168, 6148,
                                                  //|  5950, 6256, 6034, 5606, 5750, 6218, 5861, 9483, 8778, 6713, 7044, 6918, 704
                                                  //| 3, 7091, 7451, 7408, 7205, 7812, 7892, 7942, 9836, 8561, 8249, 8038, 8050, 9
                                                  //| 574, 8091, 12068, 8250, 8390, 8648, 8462, 9655, 6734, 6877, 6366, 7090, 6641
                                                  //| , 6558, 6611, 6611, 7063, 6936, 7164)
 	
 	val theorVal = nVal.map(i=>i*scala.math.log10(i))
                                                  //> theorVal  : Array[Double] = Array(0.6020599913279624, 1.4313637641589874, 2.
                                                  //| 4082399653118496, 3.494850021680094, 4.668907502301861, 5.915686280099798, 7
                                                  //| .224719895935548, 8.588182584953923, 10.0, 11.455319536740477, 12.9501749525
                                                  //| 71498, 14.481263579988877, 16.04579249949533, 17.64136888583522, 19.26591972
                                                  //| 2494797, 20.917631663430654, 22.59490509185951, 24.29631841810375, 26.020599
                                                  //| 913279625, 27.766605189412306, 29.533298978088535, 31.319740228404637, 33.12
                                                  //| 506980107854, 34.948500216800944, 36.789307047241266, 38.64682163229266, 40.
                                                  //| 52042487758214, 42.409541939069726, 44.31363764158987, 46.23221250886245, 48
                                                  //| .16479930623699, 50.110960015970285, 52.07028317943667, 54.04238155225965, 5
                                                  //| 6.02689002762234, 58.023463790478814, 60.031776671438784, 62.051519674033464
                                                  //| , 64.08239965311849, 66.12413812550915, 68.17647019671182, 70.23914358992222
                                                  //| , 72.31191776539225, 74.39456311989046, 76.4868602573524, 78.58859932297872,
                                                  //|  80.69957939402818, 82.8
                                                  //| Output exceeds cutoff limit.
 	
  val file = new File("/Users/rohith/scala-eclipse-work/19AIE212-DAA/ShellSort.csv")
                                                  //> file  : java.io.File = /Users/rohith/scala-eclipse-work/19AIE212-DAA/ShellSo
                                                  //| rt.csv
	val bw = new BufferedWriter(new FileWriter(file))
                                                  //> bw  : java.io.BufferedWriter = java.io.BufferedWriter@77b52d12
	for(n<-1 until time.length){
		bw.write(nVal(n).toString+","+time(n).toString+","+theorVal(n)+"\n")
	}
	bw.close()

}